[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ocd"
version = "0.1.0"
description = "Organized Content Directory - AI-powered intelligent file organization system"
readme = "README.md"
authors = [
    {name = "Hootan Moradi", email = "me@hootan.dev"},
]
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["ai", "file-organization", "machine-learning", "automation", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Filesystems",
    "Topic :: Utilities",
]
dependencies = [
    "click>=8.1.0",
    "typer>=0.9.0",
    "jinja2>=3.1.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "keyring>=24.0.0",
    "httpx>=0.25.0",
    "rich>=13.0.0",
    "pathlib-mate>=1.0.0",
    "aiofiles>=23.0.0",
    "structlog>=23.0.0",
    "python-magic>=0.4.27",
    "toml>=0.10.2",
    "pyyaml>=6.0",
    "tiktoken>=0.5.0",
    # Offline SLM dependencies
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",
    "numpy>=1.24.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
]
ai = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "google-generativeai>=0.3.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",
    "ollama>=0.1.0",
]
local = [
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",
    "tokenizers>=0.13.0",
]
agents = [
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.0.20",
    "langchain-openai>=0.0.5",
    "langchain-anthropic>=0.1.0",
    "langsmith>=0.0.80",
]
full = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "google-generativeai>=0.3.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "sentence-transformers>=2.2.0",
    "ollama>=0.1.0",
    "langchain>=0.1.0",
    "langchain-core>=0.1.0",
    "langchain-community>=0.0.20",
    "langchain-openai>=0.0.5",
    "langchain-anthropic>=0.1.0",
    "langsmith>=0.0.80",
]

[project.urls]
Homepage = "https://github.com/hoootan/ocd"
Documentation = "https://github.com/hoootan/ocd#readme"
Repository = "https://github.com/hoootan/ocd.git"
"Bug Tracker" = "https://github.com/hoootan/ocd/issues"
"Source Code" = "https://github.com/hoootan/ocd"
Changelog = "https://github.com/hoootan/ocd/blob/main/CHANGELOG.md"

[project.scripts]
ocd = "ocd.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ocd"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "magic.*",
    "tiktoken.*",
    "ollama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/ocd"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]